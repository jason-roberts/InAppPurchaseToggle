using System;
using InAppPurchaseToggle.Tests.TestFeatures;
using MoqaLate.Autogenerated;
using Xunit;

namespace InAppPurchaseToggle.Tests
{
    public class ConcreteRepeatToggleTests
    {
        [Fact]
        public void ShouldDefaultToRealWindowsStoreGateway()
        {
            var sut = new MultiFeatureWith123Instances();

            Assert.IsType(typeof (RealWindowsStoreGateway), sut.WindowsStoreGateway);
        }


        [Fact]
        public void ShouldDefaultToUnderscoreIntanceNumberFormatter()
        {
            var sut = new MultiFeatureWith123Instances();

            Assert.IsType(typeof(NameUnderscoreNumberFormatter), sut.ToggleInstanceNumberFormatter);
        }

        [Fact]
        public void ShouldReturnTotalRepeatOffers()
        {
            var sut = new MultiFeatureWith123Instances();

            var totalOffers = sut.TotalRepeatsAvailable;
            
            Assert.Equal(123, totalOffers);
        }


        [Fact]
        public void ShouldErrorIfDerivedToggleWithZeroRepeats()
        {
            var sut = new MultiFeatureWithZeroRepeats();

            Assert.Throws<InvalidOperationException>(() => { var totalOffers = sut.TotalRepeatsAvailable; });            
        }


        [Fact]
        public void ShouldErrorIfDerivedToggleWithNegativeRepeats()
        {
            var sut = new MultiFeatureWithNegativeRepeats();

            Assert.Throws<InvalidOperationException>(() => { var totalOffers = sut.TotalRepeatsAvailable; });
        }






         [Fact]
        public void ShouldCallGatewayAsManyTimesAsThereAreOfferNumbersWhenCalculatingTotalPurchased()
        {
            var mockGateway = new WindowsStoreGatewayMoqaLate();
            mockGateway.LookupActiveStatusSetReturnValue(true);

            var sut = new MultiFeatureWith123Instances()
                          {
                              WindowsStoreGateway = mockGateway
                          };

            var total = sut.GetTotalPurchased();

            Assert.Equal(123, mockGateway.LookupActiveStatusTimesCalled());
        }


         [Fact]
         public void ShouldCallNameFormatterAsManyTimesAsThereAreOfferNumbersWhenCalculatingTotalPurchased()
         {
             var mockGateway = new WindowsStoreGatewayMoqaLate();
             mockGateway.LookupActiveStatusSetReturnValue(true);

             var mockConcat = new  RepeatToggleInstanceNumberConcatinatorMoqaLate();

             var sut = new MultiFeatureWith123Instances()
             {
                 WindowsStoreGateway = mockGateway,
                 ToggleInstanceNumberFormatter = mockConcat
             };

             var total = sut.GetTotalPurchased();

             Assert.Equal(123, mockConcat.CombineTimesCalled());
         }


        // test defualt combiner

        //[Fact]
        //public void ShouldMapName()
        //{
        //    var mockNameMapper = new ToggleToInAppOfferNameMapperMoqaLate();

        //    var sut = new Feature1
        //                  {
        //                      WindowsStoreGateway = new WindowsStoreGatewayMoqaLate(),
        //                      InAppOfferNameMapper = mockNameMapper
        //                  };

        //    var dontCare = sut.IsPurchased;

        //    Assert.True(mockNameMapper.MapWasCalledWith(sut));
        //}
    }
}